[{"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\index.js":"1","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\forms\\AddTodo.js":"2","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\forms\\EditTodo.js":"3","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\apiFunctions\\send.js":"4","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\styles\\styled.js":"5","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\icons\\svgIcons.js":"6","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\apiFunctions\\get.js":"7","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\main\\App.js":"8","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\main\\toggleFinishedTasks.js":"9","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\main\\ToggleFinishedTasks.js":"10","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\main\\ShowTodoList.js":"11"},{"size":207,"mtime":1612013102517,"results":"12","hashOfConfig":"13"},{"size":1816,"mtime":1612012630750,"results":"14","hashOfConfig":"13"},{"size":3788,"mtime":1612012615747,"results":"15","hashOfConfig":"13"},{"size":1562,"mtime":1612012533727,"results":"16","hashOfConfig":"13"},{"size":318,"mtime":1611997856093,"results":"17","hashOfConfig":"13"},{"size":755,"mtime":1612001567602,"results":"18","hashOfConfig":"13"},{"size":332,"mtime":1611999533501,"results":"19","hashOfConfig":"13"},{"size":3633,"mtime":1612014019105,"results":"20","hashOfConfig":"13"},{"size":478,"mtime":1612013735684,"results":"21","hashOfConfig":"13"},{"size":478,"mtime":1612013735684,"results":"22","hashOfConfig":"13"},{"size":2227,"mtime":1612013940728,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bfsd49",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\index.js",[],"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\forms\\AddTodo.js",[],["48","49"],"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\forms\\EditTodo.js",["50","51","52","53"],"import { updateTodoOnServer } from '../apiFunctions/send';\r\nimport { deleteOnServer } from '../apiFunctions/send';\r\nimport { useRef, useEffect, useState } from 'react';\r\n\r\nconst TodoInspectMode = ({\r\n    todos,\r\n    setTodos,\r\n    elementCurrentlyBeingEdited,\r\n    controlledInputValues,\r\n    setControlledInputValues,\r\n    setTodoInspectModeState,\r\n    todoInspectModeState,\r\n    \r\n}) => {\r\n\r\n  \r\n\r\n    const handleEditTodo = (newValue) => {\r\n    \r\n        if (newValue !== todos[elementCurrentlyBeingEdited].task) { //making sure value is new\r\n            let tempArray = [...todos];\r\n\r\n            tempArray[elementCurrentlyBeingEdited].task = newValue;\r\n          \r\n            setTodos(tempArray);\r\n            updateTodoOnServer(newValue, todos[elementCurrentlyBeingEdited].id);\r\n        }\r\n    };\r\n\r\n    const handleClickCheckbox = () => {\r\n        let tempArray = [...todos];\r\n\r\n        if (tempArray[elementCurrentlyBeingEdited].is_completed === 0) {\r\n            tempArray[elementCurrentlyBeingEdited].is_completed = 1;\r\n            updateTodoOnServer(\r\n                todos[elementCurrentlyBeingEdited].task,\r\n                todos[elementCurrentlyBeingEdited].id,\r\n                1,\r\n            );\r\n        } else {\r\n            tempArray[elementCurrentlyBeingEdited].is_completed = 0;\r\n            updateTodoOnServer(\r\n                todos[elementCurrentlyBeingEdited].task,\r\n                todos[elementCurrentlyBeingEdited].id,\r\n                0,\r\n            );\r\n        }\r\n\r\n        setTodos(tempArray);\r\n        setTodoInspectModeState(false);\r\n    };\r\n\r\n    const handleDeleteTodo = (event) => {\r\n        event.preventDefault();\r\n       \r\n    \r\n        \r\n\r\n        let filteredArray = todos.filter((index) => index !== elementCurrentlyBeingEdited);\r\n\r\n        filteredArray = filteredArray.map((item) => {\r\n            return {\r\n                id: todos[elementCurrentlyBeingEdited].id,\r\n                task: item.task,    \r\n                is_completed: item.is_completed,\r\n            };\r\n        });\r\n        \r\n        setTodos(filteredArray);\r\n        setTodoInspectModeState(false);\r\n     \r\n       \r\n    }\r\n    \r\n\r\n    const handleEditSubmitForm = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (controlledInputValues.editTodoInputValue.length >= 1) {\r\n            //validating form\r\n\r\n            handleEditTodo(controlledInputValues.editTodoInputValue);\r\n            setControlledInputValues({ ...controlledInputValues, editTodoInputValue: '' });\r\n            setTodoInspectModeState(false);\r\n        }\r\n    };\r\n\r\n    if (todoInspectModeState === true) {\r\n        return (\r\n            <>\r\n            <form onSubmit={handleEditSubmitForm}>\r\n                <label htmlFor=\"editTodoInput\">Edit element</label>\r\n                <input\r\n                    id=\"editTodoInput\"\r\n                    value={controlledInputValues.editTodoInputValue}\r\n                    onChange={(event) =>\r\n                        setControlledInputValues({\r\n                            ...controlledInputValues,\r\n                            editTodoInputValue: event.target.value,\r\n                        })\r\n                    }\r\n                ></input>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    onClick={() => handleClickCheckbox(elementCurrentlyBeingEdited)}\r\n                    defaultChecked={todos[elementCurrentlyBeingEdited].is_completed === 1}\r\n                ></input>\r\n\r\n                <input type=\"submit\" value=\"submit edit\"></input>\r\n                <button onClick={handleDeleteTodo}>delete</button>\r\n            </form>\r\n            <button onClick={(()=> setTodoInspectModeState(false))}>QUIT</button>\r\n            </>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default TodoInspectMode;\r\n","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\apiFunctions\\send.js",[],"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\styles\\styled.js",[],"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\icons\\svgIcons.js",[],"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\apiFunctions\\get.js",[],"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\main\\App.js",[],"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\main\\toggleFinishedTasks.js",[],"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\main\\ToggleFinishedTasks.js",[],"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\main\\ShowTodoList.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":2,"column":10,"nodeType":"60","messageId":"61","endLine":2,"endColumn":24},{"ruleId":"58","severity":1,"message":"62","line":3,"column":10,"nodeType":"60","messageId":"61","endLine":3,"endColumn":16},{"ruleId":"58","severity":1,"message":"63","line":3,"column":18,"nodeType":"60","messageId":"61","endLine":3,"endColumn":27},{"ruleId":"58","severity":1,"message":"64","line":3,"column":29,"nodeType":"60","messageId":"61","endLine":3,"endColumn":37},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'deleteOnServer' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]