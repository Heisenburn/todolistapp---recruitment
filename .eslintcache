[{"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\index.js":"1","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\App.js":"2","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\forms\\AddTodo.js":"3","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\forms\\EditTodo.js":"4","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\apiFunctions\\send.js":"5","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\styles\\styled.js":"6","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\icons\\svgIcons.js":"7","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\apiFunctions\\get.js":"8"},{"size":202,"mtime":1611994175146,"results":"9","hashOfConfig":"10"},{"size":5188,"mtime":1612010478561,"results":"11","hashOfConfig":"10"},{"size":1788,"mtime":1612010082392,"results":"12","hashOfConfig":"10"},{"size":3803,"mtime":1612009138659,"results":"13","hashOfConfig":"10"},{"size":1470,"mtime":1612005873922,"results":"14","hashOfConfig":"10"},{"size":318,"mtime":1611997856093,"results":"15","hashOfConfig":"10"},{"size":755,"mtime":1612001567602,"results":"16","hashOfConfig":"10"},{"size":332,"mtime":1611999533501,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"bfsd49",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\index.js",[],["36","37"],"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\App.js",["38"],"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\forms\\AddTodo.js",[],"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\forms\\EditTodo.js",["39","40","41"],"import { updateTodoOnServer } from '../apiFunctions/send';\r\nimport { deleteOnServer } from '../apiFunctions/send';\r\nimport { useRef, useEffect, useState } from 'react';\r\n\r\nconst TodoInspectMode = ({\r\n    todos,\r\n    setTodos,\r\n    elementCurrentlyBeingEdited,\r\n    controlledInputValues,\r\n    setControlledInputValues,\r\n    setTodoInspectModeState,\r\n    todoInspectModeState,\r\n    \r\n}) => {\r\n    \r\n\r\n    const handleEditTodo = (newValue) => {\r\n    \r\n        if (newValue !== todos[elementCurrentlyBeingEdited].task) { //making sure value is new\r\n            let tempArray = [...todos];\r\n\r\n            tempArray[elementCurrentlyBeingEdited].task = newValue;\r\n          \r\n            setTodos(tempArray);\r\n            updateTodoOnServer(newValue, todos[elementCurrentlyBeingEdited].id);\r\n        }\r\n    };\r\n\r\n    const handleClickCheckbox = () => {\r\n        let tempArray = [...todos];\r\n\r\n        if (tempArray[elementCurrentlyBeingEdited].is_completed === 0) {\r\n            tempArray[elementCurrentlyBeingEdited].is_completed = 1;\r\n            updateTodoOnServer(\r\n                todos[elementCurrentlyBeingEdited].task,\r\n                todos[elementCurrentlyBeingEdited].id,\r\n                1,\r\n            );\r\n        } else {\r\n            tempArray[elementCurrentlyBeingEdited].is_completed = 0;\r\n            updateTodoOnServer(\r\n                todos[elementCurrentlyBeingEdited].task,\r\n                todos[elementCurrentlyBeingEdited].id,\r\n                0,\r\n            );\r\n        }\r\n\r\n        setTodos(tempArray);\r\n        setTodoInspectModeState(false);\r\n    };\r\n\r\n    const handleDeleteTodo = (event) => {\r\n        event.preventDefault();\r\n        let filteredArray = todos.filter((item, index) => index !== elementCurrentlyBeingEdited);\r\n\r\n        filteredArray = filteredArray.map((item, index) => {\r\n            return {\r\n                id: todos[elementCurrentlyBeingEdited].id,\r\n                task: item.task,\r\n                is_completed: item.is_completed,\r\n            };\r\n        });\r\n        deleteOnServer(todos[elementCurrentlyBeingEdited].id);\r\n        setTodos(filteredArray);\r\n        setTodoInspectModeState(false);\r\n    };\r\n\r\n    const handleEditSubmitForm = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (controlledInputValues.editTodoInputValue.length >= 1) {\r\n            //validating form\r\n\r\n            handleEditTodo(controlledInputValues.editTodoInputValue);\r\n            setControlledInputValues({ ...controlledInputValues, editTodoInputValue: '' });\r\n            setTodoInspectModeState(false);\r\n        }\r\n    };\r\n\r\n    if (todoInspectModeState === true) {\r\n        return (\r\n            <>\r\n            <form onSubmit={handleEditSubmitForm}>\r\n                <label htmlFor=\"editTodoInput\">Edit element</label>\r\n                <input\r\n                    id=\"editTodoInput\"\r\n                    value={controlledInputValues.editTodoInputValue}\r\n                    onChange={(event) =>\r\n                        setControlledInputValues({\r\n                            ...controlledInputValues,\r\n                            editTodoInputValue: event.target.value,\r\n                        })\r\n                    }\r\n                ></input>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    onClick={() => handleClickCheckbox(elementCurrentlyBeingEdited)}\r\n                    defaultChecked={todos[elementCurrentlyBeingEdited].is_completed === 1}\r\n                ></input>\r\n\r\n                <input type=\"submit\" value=\"submit edit\"></input>\r\n                <button onClick={handleDeleteTodo}>delete</button>\r\n            </form>\r\n            <button onClick={(()=> setTodoInspectModeState(false))}>QUIT</button>\r\n            </>\r\n        );\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default TodoInspectMode;\r\n","C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\apiFunctions\\send.js",[],"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\styles\\styled.js",[],"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\icons\\svgIcons.js",[],"C:\\Users\\Nasz Gabinet\\Desktop\\massive pixel\\todoApp\\todolistapp\\src\\apiFunctions\\get.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":1,"column":31,"nodeType":"48","messageId":"49","endLine":1,"endColumn":37},{"ruleId":"46","severity":1,"message":"47","line":3,"column":10,"nodeType":"48","messageId":"49","endLine":3,"endColumn":16},{"ruleId":"46","severity":1,"message":"50","line":3,"column":18,"nodeType":"48","messageId":"49","endLine":3,"endColumn":27},{"ruleId":"46","severity":1,"message":"51","line":3,"column":29,"nodeType":"48","messageId":"49","endLine":3,"endColumn":37},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]